[
  {
    "id": "gamesniper",
    "title": "Game Sniper",
    "shortDescription": "A desktop MS SQL-enabled application that allows users and developers to manage video games.",
    "longDescription": "Game Sniper is a comprehensive desktop application designed for gaming enthusiasts and developers. The project was completed in a group alongside James Fusco and XinRui She. It integrates with MS SQL to provide robust data management for game libraries. Users can filter games based on various criteria, write and read reviews, and simulate purchases to manage their collections. The developer interface streamlines the process of adding new games and updating existing entries, ensuring the library remains current and relevant. The application emphasizes usability and efficiency, making it a valuable tool for both casual gamers and developers.",
    "technologies": ["Java", "TypeScript", "SQL"],
    "image": { "url": "/images/gamesniper.png", "aspect": "aspect-[1]" },
    "startYearAndMonth": "2025-04",
    "endYearAndMonth": "2025-05",
    "demoVideoUrl": "https://www.youtube.com/embed/2_3E-MDyN8I",
    "isFeatured": true,
    "additionalDocuments": [
      {
        "title": "Conceptual ER Diagram",
        "url": "https://docs.google.com/document/d/1An4iu7keTYoUNFbCQovgeB_g6_DQuzBMayl0MGYVPDE/edit?usp=sharing",
        "description": "This document showcases the Entity Relationship (ER) diagram as it pertains to how the entities would interact outside the database."
      },
      {
        "title": "Technical ER Diagram",
        "url": "https://docs.google.com/document/d/1GSVaakRi0p5CiwLJGCsaChKmBq6SFE0yQWJfbu8sPQs/edit?usp=sharing",
        "description": "This document showcases the Entity Relationship (ER) diagram as it pertains to how the entities interact inside the database. This is the implemented version."
      },
      {
        "title": "Relational Schema",
        "url": "https://docs.google.com/document/d/1GLlQ0EgjJZPuL5P8cOeiCBL9zkSGwaVGA3PNX4xVS_4/edit?usp=sharing",
        "description": "This document showcases the relational model inputted into MS SQL Server."
      }
    ],
    "additionalInformation": "Technical details like connection to the database are handled automatically upon app launch and closure. Additionally, source code is not available due to academic integrity policies.",
    "myContributions": [
      "Node.js population script",
      "Web scraping script for initial data",
      "Reviews",
      "Developer Revenue",
      "Vouchers",
      "Fuzzy searching by name",
      "Login",
      "Password hashing"
    ]
  },
    {
    "id": "pipelineprocessor",
    "title": "RISC-V Pipeline Processor",
    "shortDescription": "A 5-stage RISC-V pipeline processor designed to execute the standard 32-bit RISC-V instructions with additional capabilities.",
    "longDescription": "The RISC-V Pipeline Processor was a collaborative project completed alongside Ethan Harden with help from Duy Le. Over the course of two months we designed and implemented a RISC-V processor (RV32I) in Verilog complete with a stall/hazard detection unit. The processor consisted of the traditional 5-stage pipeline design stages (Instruction Fetch, Instruction Decode, Execute, Memory Access, and Write Back). In addition to the standard RISC-V instructions, we also implemented a custom instruction named subg which accelerates the process of calculating relative primes by aiding the Euclidean algorithm. Subg functions by taking two registers a and b and subtracts the smaller from the larger and stores the resultant value in the originally larger register. This reduced cycle counts of relprime(5040) from 51,104 to 40,902. Finally, our processor implememted memory-mapped input/output (MIMO).",
    "technologies": ["Verilog", "ModelSim"],
    "image": { "url": "/images/riscv_logo.png", "aspect": "aspect-[1]" },
    "startYearAndMonth": "2025-04",
    "endYearAndMonth": "2023-05",
    "isFeatured": false,
    "additionalInformation": "Source code unavailable due to academic integrity policies as well as the collaborative nature of the project.",
    "myContributions": [
      "Design and implementation of the Verilog logic for subg, including integration with the existing forwarding/hazard detection unit",
      "Developed the EX/MEM buffer",
      "Added assembler support for subg and MIMO pseudo-instructions",
      "Created and adapted unit tests for the relative prime routine, hazard detection, and MIMO",
      "Headed debugging efforts for the project, especially for a subtle fault found with forwarding logic after adding subg logic"]
  },
  {
    "id": "bulletinboard",
    "title": "Bulletin Board",
    "shortDescription": "A web application with the goal of replacing a university bulletin board.",
    "longDescription": "Bulletin Board is a web application designed to serve as a digital alternative to traditional campus bulletin boards. Tailored for college students, it enables users to post and discover campus events, requests, and general announcements in a centralized, accessible platform. Users can create accounts, manage their own posts, and interact with others through features like messaging and following. Posts can include text and images, are categorized for easy browsing, and automatically expire after a set date to keep the board current. Moderation tools, reporting systems, and content filtering help maintain a safe and organized environment. The intuitive interface allows users to search, filter, and engage with posts, making campus communication more efficient and interactive.",
    "technologies": ["Bootstrap", "Firebase", "HTML", "CSS"],
    "image": { "url": "/images/bulletinboard.png", "aspect": "aspect-[1]" },
    "sourceCodeUrl": "https://github.com/RHIT-hixonbm/csse280-bulletinboard",
    "startYearAndMonth": "2024-06",
    "endYearAndMonth": "2024-08",
    "demoVideoUrl": "https://www.youtube.com/embed/eOllsMQuKxw",
    "isFeatured": true,
    "additionalDocuments": [
      {
        "title": "Overview and Planning",
        "url": "https://docs.google.com/document/d/1v0Yb5GP2h-ubcMkQYOjY2hA6J_R4h0dCO3PHZLxRX70/edit?usp=sharing",
        "description": "Detailed description and schema for the app and its user interactions."
      },
      {
        "title": "Mocks",
        "url": "https://www.figma.com/design/mnSoHAPHl587NWyzkGq5td/App-Preview?m=dev&node-id=0-1",
        "description": "Figma mock that was the basis of website design and interaction planning in code."
      },
      {
        "title": "Technical Features",
        "url": "https://docs.google.com/document/d/1oF0ys77LdMQsGwX6T5ltB8XZW027mEhh7wyu_ydxUBg/edit?tab=t.0",
        "description": "Document that details the special features of the app researched outside of class."
      }
    ],
    "additionalInformation": "This project was performed solo."
  },
  {
    "id": "xthreads",
    "title": "Xthreads",
    "shortDescription": "A pthread-like threading library designed for the xv6 operating system.",
    "longDescription": "\"Xthreads\" is a systems level project that implements threading for the xv6 operating system. This project was performed in a group of 3 consisting of me, CK Gallegos Rodriguez, Preksha Sarda. The hallmark of our project was our focus on a seemingly unlimited number of threads that handle all memory management in the kernel, meaning no extra memory allocation work is needed by the user. We also utilized spinlocks at the kernel level to properly synchronize thread execution for things like console printing. Threads can be created by non-thread processes, can be joined to pause execution, and perform their own resource management after execution.",
    "technologies": ["C"],
    "image": { "url": "/images/xthreads_logo.png", "aspect": "aspect-[1]" },
    "startYearAndMonth": "2025-01",
    "endYearAndMonth": "2025-02",
    "isFeatured": false,
    "additionalInformation": "Source code unavailable due to academic integrity policies.",
    "myContributions": ["Printing synchronization", "Kernel memory management model", "Thread cleanup", "Thread joining"],
    "demoVideoUrl": "https://www.youtube.com/embed/RaB0j39R8DE"
  },
  {
    "id": "propulsionpack",
    "title": "Propulsion Pack Happy Cruise!",
    "shortDescription": "A 2-D arcade game created in Java with Swing graphics.",
    "longDescription": "\"Propulsion Pack Happy Cruise\" is an arcade-style video game developed alongside Eric Stuber and Aron Craft with music design by Jackson Howard. Designed in Java/Swing, the game is a jam-packed underwater treasure-hunting adventure where you play as the hero and use your handy sea jetpack and sea pistol to navigate through 10 unique hand-crafted fully-modular levels full of new challenges. With only 3 lives, dodge sharks, homing sharks, and physical and electric barriers to achieve victory. Additionally, level modularity is supported by an intuitive format and included design guide. On the more technical side, we adhered very closely to the object-oriented design principles (encapsulation, abstraction, inheritance, and polymorphism). For instance, our game pieces like the obstacles and even the player inherit an abstract game object class, implementing object specific methods like how to \"update\" on each tick. The cornerstone of our project was the collision system with physical barriers, the homing attack system, vibrant theme, and unusual sound effect design.",
    "technologies": ["Java", "Swing"],
    "image": { "url": "/images/propulsionpack.png", "aspect": "aspect-[1]" },
    "startYearAndMonth": "2024-01",
    "endYearAndMonth": "2024-02",
    "demoVideoUrl": "https://www.youtube.com/embed/dFkh3r_Szho",
    "isFeatured": false,
    "additionalDocuments": [
      {
        "title": "Level Design Guide",
        "url": "https://docs.google.com/document/d/1VEdNAfNYXmIhVahQRmMikdli7wH1qCv29ZPMdjZRs0Q/edit?usp=sharing",
        "description": "The guide included with the project to create any number of levels."
      },
      {
        "title": "First Level File",
        "url": "https://docs.google.com/document/d/1c0uv6CkizDx6ra5T7Pl_FQ_AuB5vgKv-VG5tCTAfKlc/edit?usp=sharing",
        "description": "The raw formating of the first level the player starts at."
      }
    ],
    "myContributions":[
      "Initial app skeleton to promote object-oritented design principles",
      "Level format, parsing, and loading logic",
      "Sound effect technical implementation",
      "Hero movement",
      "Menu/end screen",
      "Scheduled object removal implementation",
      "Abstract game object design",
      "Physical collision detection design",
      "Hero projectiles"
    ],
    "additionalInformation": "Source code unavailable due to academic integrity policies as well as the collaborative nature of the project."
  },
  {
    "id": "superherodata",
    "title": "Superhero Data Analysis",
    "shortDescription": "Data visualization and statistical anlysis of a superhero related data set.",
    "longDescription": "This solo project was developed in Python with the goal to parse and identify trends in a relatively large data set consisting of 16000+ Marvel Comics characters. Each character entry of the provided data set included: page id, name, url slug, id, alignment (e.g. good, bad neutral), eye type, hair type, sex, gender/sexual minorty type, alive status, number of appearances, month and year of first appearance, and year of creation. The analysis includes a number of different visualizations including pie charts, line graphs, and bar graphs utilizing matplotlib. The goal of the utility is to allow the user to discover trends in and analyze data that may be useful elsewhere. The flow of the utility is controlled by console input. Some visualizations and presented facts are dynamically based on user-inputted ranges and selections while others are independent of input and are statically based on the provided CSV. Through the analysis tool, the user can discover trends in representation of social diversity such as prevalence of minority-identifying characters and male vs. female representation as well as character popularity and design.",
    "technologies": ["Python", "Matplotlib"],
    "image": { "url": "/images/marvellogo.png", "aspect": "aspect-[1]" },
    "demoVideoUrl": "https://www.youtube.com/embed/ZsQUCD74aWE",
    "startYearAndMonth": "2023-10",
    "endYearAndMonth": "2023-11",
    "isFeatured": false,
    "additionalInformation": "This project was performed solo. Additionally, the source code is unavailable due to academic integrity policies."
  },
  {
    "id": "friendpurge",
    "title": "Friend Purge",
    "shortDescription": "A utility for the ROBLOX game platform to prune inactive friends.",
    "longDescription": "Friend Purge is a utility that allows users of the ROBLOX platform to see which of their friends have been inactive for at least 30 days. Previously, ROBLOX had a 200 friend limit which a user can reach with relative ease since the size of most games' servers are very large. The idea is that the user can use the utility to identify which of their current friends are not playing currently so they can thin their list to open spots for other users. For security reasons, ROBLOX's built in HTTP request service does not allow outgoing requests to ROBLOX API endpoints. Additionally, there is no way to fetch user activity status with ROBLOX's included services for developers. So, to make the utility work as intended, I developed a Python proxy service to make the request to the necessary ROBLOX API endpoint and return the fetched data to the ROBLOX http service. The ROBLOX service would send a list of user IDs to the proxy which would be sent to the ROBLOX API endpoint for further user information. The proxy would return a list of user IDs paired with the UNIX timestamp of when they were last online. After the request is complete, the script inside of ROBLOX studio handles further processing and GUI generation.",
    "technologies": ["Lua", "Python", "Flask"],
    "image": { "url": "/images/friendpurge.png", "aspect": "aspect-16/9" },
    "startYearAndMonth": "2022-06",
    "endYearAndMonth": "2022-06",
    "isFeatured": false,
    "sourceCodeUrl": "",
    "additionalDocuments":[
      {
        "title": "Game Link",
        "url": "https://www.roblox.com/games/8438978065/Friend-Purge",
        "description": "Link to the original game published on ROBLOX"
      }
    ],
    "additionalInformation": "This project was performed solo. Currently, ROBLOX has sunset the API endpoint that allowed the game to retrieve users' last online timestamp, so the game no longer works. The demo video utilizes a mock API that merely simulates the original ROBLOX API."
  }
]
